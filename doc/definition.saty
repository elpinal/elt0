% -*- coding: utf-8 -*-
@require: stdja
@import: foundation

let inst = Foundation.inst in
let display-instruction = Foundation.display-instruction in

StdJa.document (|
  title = {ELT0};
  author = {El Pin Al};
  show-title = false;
  show-toc = false;
|) '<
  +section {Introduction} <
    +pr {
      Low-level programs are sometimes hand-written to facilitate efficient computing.
      Another situation where low-level programs are used is extensible, performance-conscious systems.
      Such systems exploit low-level portable programs.
      However, the safety of most low-level programs is not guaranteed since most low-level languages
      provide only inferior safety mechanisms
      and donâ€™t have their own type systems.
    }

    +pr {
      Typed assembly languages are introduced in a paper \double-quotes{From System F to Typed Assembly Language} (Morrisett et al., 1998).
    }

    +pr {
      In this article, we define a general-purpose typed assembly language which targets abstract machines.
      Its syntax is given in Figure 1.
    }

    +BNF (`Instructions and operands`) (fun ctx0 ->
      block-frame-breakable ctx0 (10pt, 10pt, 10pt, 10pt) Foundation.frame
        (fun ctx -> (
          let display p = inst p |> display-instruction in
          let-math \semi-rel = text-in-math MathBin (fun ctx -> read-inline ctx {\;}) in
          let whole =
            [ (| desc = {registers:}
               ; metavar = ${r}
               ; list = [ (`general-purpose registers`, ${\r{1} \| \r{2} \| ... \| \r{k}})
                        ]
              |)
            ; (| desc = {operands:}
               ; metavar = ${\nu}
               ; list = [ (`register`, ${r})
                        ; (`integer`, ${i})
                        ]
              |)
            ; (| desc = {instructions:}
               ; metavar = ${\iota}
               ; list = [ (`move`               , display (${mov}, [${r}; ${\nu};       ]))
                        ; (`add`                , display (${add}, [${r}; ${\nu}; ${\nu}]))
                        ; (`subtract`           , display (${sub}, [${r}; ${\nu}; ${\nu}]))
                        ; (`logical and`        , display (${and}, [${r}; ${\nu}; ${\nu}]))
                        ; (`logical or`         , display (${or} , [${r}; ${\nu}; ${\nu}]))
                        ; (`logical not`        , display (${not}, [${r}; ${\nu};       ]))
                        ; (`logical shift left` , display (${shl}, [${r}; ${\nu}; ${\nu}]))
                        ; (`logical shift right`, display (${shr}, [${r}; ${\nu}; ${\nu}]))
                        ]
              |)
            ; (| desc = {instruction sequences:}
               ; metavar = ${I}
               ; list = [ (`instructions`, ${\iota \semi-rel ... \semi-rel \iota})
                        ]
              |)
            ]
          in
          let f = (fun set -> (
            let desc = read-inline ctx set#desc in
            let metavar = set#metavar in
            let list = Foundation.lines ctx set#list in
            let ib = embed-math ctx metavar ++ (read-inline ctx {::=} |> Foundation.wrap-with-space 3pt) ++ inline-fil ++ desc in
            let bb = Foundation.make-block-from-lines ctx (ib :: list) in
              bb
          ))
          in
            List.map f whole |> List.fold-left (+++) block-nil
        ))
    );

    +pr {
      Its evaluation rules are given in Figure 2.
    }

    % +BNF (`Evaluation rules`) (fun ctx0 ->
    %   block-frame-breakable ctx0 (10pt, 10pt, 10pt, 10pt) Foundation.frame
    %     (fun ctx -> (
    %       let whole =
    %         [ (| ident = {E-Machine}
    %            ; rule = ([${}], ${})
    %           |)
    %         ]
    %       in
    %       let f = (fun set -> (
    %         let ident = read-inline ctx set#ident in
    %         let rule = Foundation.rule ctx set#rule in
    %         let ib = (read-inline ctx {::=} |> Foundation.wrap-with-space 3pt) ++ inline-fil ++ ident in
    %         let bb = Foundation.make-block-from-lines ctx (ib :: rule) in
    %           bb
    %       ))
    %       in
    %         List.map f whole |> List.fold-left (+++) block-nil
    %     ))
    % );

  >
>
